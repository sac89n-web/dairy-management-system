name: Comprehensive Test Suite

on:
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'

jobs:
  run-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tests/package.json
        
    - name: 📦 Install .NET dependencies
      run: dotnet restore
      
    - name: 📦 Install Node.js dependencies
      working-directory: tests
      run: |
        npm install
        npm install -g newman newman-reporter-htmlextra
        
    - name: 🎭 Install Playwright
      working-directory: tests
      run: |
        npx playwright install --with-deps chromium
        
    - name: 🔐 Setup test environment
      working-directory: tests
      run: |
        cat > .env.tests << EOF
        API_BASE_URL=${{ secrets.API_BASE_URL || 'https://dairy-api.render.com' }}
        API_KEY=${{ secrets.API_KEY || '' }}
        DB_CONN=${{ secrets.DB_CONN || '' }}
        PGHOST=${{ secrets.PGHOST || '' }}
        PGUSER=${{ secrets.PGUSER || '' }}
        PGPASSWORD=${{ secrets.PGPASSWORD || '' }}
        PGDATABASE=${{ secrets.PGDATABASE || '' }}
        PGPORT=${{ secrets.PGPORT || '5432' }}
        PGSSLMODE=${{ secrets.PGSSLMODE || 'require' }}
        EOF
        
    - name: 🧪 Run comprehensive test suite
      working-directory: tests
      run: |
        chmod +x scripts/run-all.sh
        bash scripts/run-all.sh
      continue-on-error: true
      
    - name: 📊 Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ github.run_number }}
        path: |
          tests/report/
          !tests/report/*.tmp
        retention-days: 30
        
    - name: 📋 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: tests/report/results.json
        retention-days: 7
        
    - name: 💬 Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'tests/report/results.json';
          
          if (fs.existsSync(path)) {
            const results = JSON.parse(fs.readFileSync(path, 'utf8'));
            
            let summary = '## 🧪 Test Results Summary\n\n';
            summary += `**Timestamp:** ${results.timestamp}\n`;
            summary += `**Environment:** ${results.environment.API_BASE_URL}\n\n`;
            
            summary += '| Test Type | Status | Duration | Details |\n';
            summary += '|-----------|--------|----------|----------|\n';
            
            Object.entries(results.tests).forEach(([name, result]) => {
              const emoji = result.status === 'passed' ? '✅' : result.status === 'failed' ? '❌' : '⚠️';
              const testName = name.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase());
              summary += `| ${testName} | ${emoji} ${result.status} | ${result.duration} | ${result.details} |\n`;
            });
            
            summary += '\n📊 [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
          
    - name: 🎯 Set workflow status
      if: always()
      run: |
        if [ -f "tests/report/results.json" ]; then
          # Check if critical tests passed
          UNIT_PASSED=$(jq -r '.tests.unit_tests.status // "failed"' tests/report/results.json)
          API_PASSED=$(jq -r '.tests.api_tests.status // "failed"' tests/report/results.json)
          
          if [ "$UNIT_PASSED" = "passed" ] && [ "$API_PASSED" = "passed" ]; then
            echo "✅ Critical tests passed"
            exit 0
          else
            echo "❌ Critical tests failed"
            exit 1
          fi
        else
          echo "❌ No test results found"
          exit 1
        fi