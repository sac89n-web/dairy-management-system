@page
@using Dairy.Web.Pages
@model CloudMonitoringModel

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="fas fa-cloud text-primary"></i> Cloud Monitoring & Performance</h2>
        <p class="text-muted">Monitor system performance, uptime, and cloud resources</p>
    </div>
    <div>
        <button class="btn btn-success me-2" onclick="refreshMetrics()">
            <i class="fas fa-sync-alt"></i> Refresh
        </button>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#alertsModal">
            <i class="fas fa-bell"></i> Alerts (@Model.Alerts.Count)
        </button>
    </div>
</div>

<!-- System Status Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body">
                <h5><i class="fas fa-server"></i> System Status</h5>
                <h3>@Model.SystemStatus</h3>
                <small>Uptime: @Model.Uptime</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-info text-white">
            <div class="card-body">
                <h5><i class="fas fa-tachometer-alt"></i> Response Time</h5>
                <h3>@Model.ResponseTime ms</h3>
                <small>Average last hour</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <h5><i class="fas fa-memory"></i> Memory Usage</h5>
                <h3>@Model.MemoryUsage%</h3>
                <small>@Model.MemoryUsed GB / @Model.TotalMemory GB</small>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <h5><i class="fas fa-microchip"></i> CPU Usage</h5>
                <h3>@Model.CpuUsage%</h3>
                <small>Current load</small>
            </div>
        </div>
    </div>
</div>

<!-- Performance Charts -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-chart-line text-primary"></i> Response Time Trend</h5>
            </div>
            <div class="card-body">
                <canvas id="responseTimeChart" height="200"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-chart-area text-success"></i> Resource Usage</h5>
            </div>
            <div class="card-body">
                <canvas id="resourceChart" height="200"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Database Performance -->
<div class="row mb-4">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-database text-info"></i> Database Performance</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Metric</th>
                                <th>Current Value</th>
                                <th>Threshold</th>
                                <th>Status</th>
                                <th>Last Updated</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var metric in Model.DatabaseMetrics)
                            {
                                <tr>
                                    <td><strong>@metric.MetricName</strong></td>
                                    <td>@metric.CurrentValue @metric.Unit</td>
                                    <td>@metric.Threshold @metric.Unit</td>
                                    <td>
                                        <span class="badge @(metric.Status switch {
                                            "Good" => "bg-success",
                                            "Warning" => "bg-warning",
                                            "Critical" => "bg-danger",
                                            _ => "bg-secondary"
                                        })">@metric.Status</span>
                                    </td>
                                    <td>@metric.LastUpdated.ToString("HH:mm:ss")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-hdd text-warning"></i> Storage Usage</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <span>Database</span>
                        <span>@Model.DatabaseSize GB</span>
                    </div>
                    <div class="progress">
                        <div class="progress-bar bg-info" style="width: @((Model.DatabaseSize / Model.TotalStorage) * 100)%"></div>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <span>Logs</span>
                        <span>@Model.LogsSize GB</span>
                    </div>
                    <div class="progress">
                        <div class="progress-bar bg-warning" style="width: @((Model.LogsSize / Model.TotalStorage) * 100)%"></div>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <span>Backups</span>
                        <span>@Model.BackupsSize GB</span>
                    </div>
                    <div class="progress">
                        <div class="progress-bar bg-success" style="width: @((Model.BackupsSize / Model.TotalStorage) * 100)%"></div>
                    </div>
                </div>
                <hr>
                <div class="d-flex justify-content-between">
                    <strong>Total Used</strong>
                    <strong>@(Model.DatabaseSize + Model.LogsSize + Model.BackupsSize) / @Model.TotalStorage GB</strong>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- API Endpoints Performance -->
<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-plug text-success"></i> API Endpoints Performance</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Endpoint</th>
                                <th>Method</th>
                                <th>Requests/Hour</th>
                                <th>Avg Response Time</th>
                                <th>Success Rate</th>
                                <th>Last Error</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var endpoint in Model.ApiEndpoints)
                            {
                                <tr>
                                    <td><code>@endpoint.Path</code></td>
                                    <td><span class="badge bg-primary">@endpoint.Method</span></td>
                                    <td>@endpoint.RequestsPerHour</td>
                                    <td>@endpoint.AvgResponseTime ms</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <span class="me-2">@endpoint.SuccessRate%</span>
                                            <div class="progress flex-grow-1" style="height: 8px;">
                                                <div class="progress-bar @(endpoint.SuccessRate >= 95 ? "bg-success" : endpoint.SuccessRate >= 90 ? "bg-warning" : "bg-danger")" 
                                                     style="width: @endpoint.SuccessRate%"></div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>@(endpoint.LastError ?? "None")</td>
                                    <td>
                                        <span class="badge @(endpoint.SuccessRate >= 95 ? "bg-success" : endpoint.SuccessRate >= 90 ? "bg-warning" : "bg-danger")">
                                            @(endpoint.SuccessRate >= 95 ? "Healthy" : endpoint.SuccessRate >= 90 ? "Warning" : "Critical")
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Recent Logs -->
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0"><i class="fas fa-file-alt text-secondary"></i> Recent System Logs</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                    <table class="table table-sm mb-0">
                        <thead class="table-light sticky-top">
                            <tr>
                                <th>Timestamp</th>
                                <th>Level</th>
                                <th>Source</th>
                                <th>Message</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in Model.SystemLogs.OrderByDescending(x => x.Timestamp))
                            {
                                <tr>
                                    <td><small>@log.Timestamp.ToString("HH:mm:ss")</small></td>
                                    <td>
                                        <span class="badge @(log.Level switch {
                                            "Error" => "bg-danger",
                                            "Warning" => "bg-warning",
                                            "Info" => "bg-info",
                                            "Debug" => "bg-secondary",
                                            _ => "bg-primary"
                                        })">@log.Level</span>
                                    </td>
                                    <td><small>@log.Source</small></td>
                                    <td><small>@log.Message</small></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Alerts Modal -->
<div class="modal fade" id="alertsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">System Alerts</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (Model.Alerts.Any())
                {
                    @foreach (var alert in Model.Alerts.OrderByDescending(x => x.Timestamp))
                    {
                        <div class="alert @(alert.Severity switch {
                            "Critical" => "alert-danger",
                            "Warning" => "alert-warning",
                            "Info" => "alert-info",
                            _ => "alert-secondary"
                        }) d-flex align-items-center">
                            <i class="fas @(alert.Severity switch {
                                "Critical" => "fa-exclamation-triangle",
                                "Warning" => "fa-exclamation-circle",
                                "Info" => "fa-info-circle",
                                _ => "fa-bell"
                            }) me-2"></i>
                            <div class="flex-grow-1">
                                <strong>@alert.Title</strong><br>
                                <small>@alert.Message</small><br>
                                <small class="text-muted">@alert.Timestamp.ToString("dd/MM/yyyy HH:mm:ss")</small>
                            </div>
                            <button class="btn btn-sm btn-outline-secondary" onclick="dismissAlert(@alert.Id)">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-check-circle fa-3x mb-3"></i>
                        <h5>No Active Alerts</h5>
                        <p>All systems are running normally</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Response Time Chart
const responseCtx = document.getElementById('responseTimeChart').getContext('2d');
const responseChart = new Chart(responseCtx, {
    type: 'line',
    data: {
        labels: @Html.Raw(Json.Serialize(Model.ResponseTimeHistory.Select(x => x.Time.ToString("HH:mm")).ToArray())),
        datasets: [{
            label: 'Response Time (ms)',
            data: @Html.Raw(Json.Serialize(Model.ResponseTimeHistory.Select(x => x.Value).ToArray())),
            borderColor: '#007bff',
            backgroundColor: 'rgba(0, 123, 255, 0.1)',
            tension: 0.4
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});

// Resource Usage Chart
const resourceCtx = document.getElementById('resourceChart').getContext('2d');
const resourceChart = new Chart(resourceCtx, {
    type: 'line',
    data: {
        labels: @Html.Raw(Json.Serialize(Model.ResourceHistory.Select(x => x.Time.ToString("HH:mm")).ToArray())),
        datasets: [{
            label: 'CPU %',
            data: @Html.Raw(Json.Serialize(Model.ResourceHistory.Select(x => x.CpuUsage).ToArray())),
            borderColor: '#28a745',
            backgroundColor: 'rgba(40, 167, 69, 0.1)'
        }, {
            label: 'Memory %',
            data: @Html.Raw(Json.Serialize(Model.ResourceHistory.Select(x => x.MemoryUsage).ToArray())),
            borderColor: '#ffc107',
            backgroundColor: 'rgba(255, 193, 7, 0.1)'
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            y: {
                beginAtZero: true,
                max: 100
            }
        }
    }
});

function refreshMetrics() {
    location.reload();
}

function dismissAlert(alertId) {
    alert(`Alert #${alertId} dismissed`);
    location.reload();
}

// Auto-refresh every 30 seconds
setInterval(() => {
    refreshMetrics();
}, 30000);
</script>