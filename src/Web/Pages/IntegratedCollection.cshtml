@page
@model IntegratedCollectionModel
@{
    ViewData["Title"] = "Integrated Collection";
}

<form method="post">
    @Html.AntiForgeryToken()

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="fas fa-microchip text-primary"></i> Integrated Milk Collection</h2>
        <p class="text-muted">Phase 2: Automated collection with hardware integration</p>
    </div>
    <div>
        <span class="badge bg-success me-2" id="hardwareStatus">Hardware Ready</span>
        <button class="btn btn-primary" onclick="startNewSession()">
            <i class="fas fa-play"></i> Start Collection
        </button>
    </div>
</div>

<div class="row">
    <!-- Live Session -->
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-tachometer-alt"></i> Live Collection Session</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Farmer (RFID)</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="farmerInfo" readonly placeholder="Scan RFID card...">
                            <button class="btn btn-outline-secondary" onclick="scanRfid()">
                                <i class="fas fa-id-card"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Session ID</label>
                        <input type="text" class="form-control" id="sessionId" readonly>
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label class="form-label">Weight (kg)</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="liveWeight" readonly>
                            <button class="btn btn-outline-secondary" onclick="tareScale()">
                                <i class="fas fa-balance-scale"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">FAT %</label>
                        <input type="text" class="form-control" id="liveFat" readonly>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">SNF %</label>
                        <input type="text" class="form-control" id="liveSnf" readonly>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Rate (₹/L)</label>
                        <input type="text" class="form-control" id="liveRate" readonly>
                    </div>
                </div>
                
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label">Density</label>
                        <input type="text" class="form-control" id="liveDensity" readonly>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Temperature (°C)</label>
                        <input type="text" class="form-control" id="liveTemp" readonly>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Total Amount (₹)</label>
                        <input type="text" class="form-control fw-bold" id="totalAmount" readonly>
                    </div>
                </div>
                
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button class="btn btn-warning" onclick="analyzeQuality()">
                        <i class="fas fa-flask"></i> Analyze Quality
                    </button>
                    <button class="btn btn-success" onclick="completeCollection()">
                        <i class="fas fa-check"></i> Complete & Print
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Hardware Status -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-cogs"></i> Hardware Status</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <span>Digital Scale</span>
                        <span class="badge bg-success">Connected</span>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <span>Milk Analyzer</span>
                        <span class="badge bg-success">Ready</span>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <span>RFID Reader</span>
                        <span class="badge bg-success">Scanning</span>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <span>Thermal Printer</span>
                        <span class="badge bg-success">Ready</span>
                    </div>
                </div>
                
                <hr>
                
                <div class="mb-2">
                    <small class="text-muted">Today's Collections</small>
                    <div class="fw-bold">47 sessions</div>
                </div>
                <div class="mb-2">
                    <small class="text-muted">Total Volume</small>
                    <div class="fw-bold">1,247 L</div>
                </div>
                <div class="mb-2">
                    <small class="text-muted">Avg Quality</small>
                    <div class="fw-bold">FAT: 4.2% | SNF: 8.7%</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let currentSession = null;
let weightInterval = null;

function startNewSession() {
    currentSession = {
        id: 'S' + Date.now(),
        startTime: new Date(),
        farmer: null
    };
    
    document.getElementById('sessionId').value = currentSession.id;
    document.getElementById('farmerInfo').placeholder = 'Scan RFID card to identify farmer...';
    
    // Start live weight monitoring
    startWeightMonitoring();
    
    logMessage('New collection session started: ' + currentSession.id);
}

function startWeightMonitoring() {
    weightInterval = setInterval(() => {
        const weight = (Math.random() * 20 + 5).toFixed(2);
        document.getElementById('liveWeight').value = weight;
        
        // Auto-calculate amount if rate is available
        const rate = parseFloat(document.getElementById('liveRate').value) || 0;
        if (rate > 0) {
            const amount = (parseFloat(weight) * rate).toFixed(2);
            document.getElementById('totalAmount').value = '₹' + amount;
        }
    }, 1000);
}

function scanRfid() {
    logMessage('Scanning RFID card...');
    setTimeout(() => {
        const farmers = [
            { id: 'F001', name: 'राहुल पाटील' },
            { id: 'F002', name: 'सुनील शर्मा' },
            { id: 'F003', name: 'अनिल कुमार' }
        ];
        
        const farmer = farmers[Math.floor(Math.random() * farmers.length)];
        document.getElementById('farmerInfo').value = `${farmer.id} - ${farmer.name}`;
        
        if (currentSession) {
            currentSession.farmer = farmer;
        }
        
        logMessage(`Farmer identified: ${farmer.name} (${farmer.id})`);
    }, 1500);
}

function analyzeQuality() {
    logMessage('Starting milk quality analysis...');
    document.getElementById('liveFat').value = 'Analyzing...';
    document.getElementById('liveSnf').value = 'Analyzing...';
    document.getElementById('liveDensity').value = 'Analyzing...';
    document.getElementById('liveTemp').value = 'Analyzing...';
    
    setTimeout(() => {
        const fat = (Math.random() * 2 + 3).toFixed(2);
        const snf = (Math.random() * 1.5 + 8).toFixed(2);
        const density = (Math.random() * 0.005 + 1.025).toFixed(3);
        const temp = (Math.random() * 5 + 23).toFixed(1);
        
        document.getElementById('liveFat').value = fat + '%';
        document.getElementById('liveSnf').value = snf + '%';
        document.getElementById('liveDensity').value = density;
        document.getElementById('liveTemp').value = temp + '°C';
        
        // Calculate rate based on quality
        const rate = calculateRate(parseFloat(fat), parseFloat(snf));
        document.getElementById('liveRate').value = '₹' + rate.toFixed(2);
        
        logMessage(`Quality analysis complete - FAT: ${fat}%, SNF: ${snf}%`);
    }, 3000);
}

function calculateRate(fat, snf) {
    let rate = 35.0;
    if (fat >= 4.0) rate += 10.0;
    if (fat >= 4.5) rate += 5.0;
    if (snf >= 8.5) rate += 5.0;
    if (snf >= 9.0) rate += 3.0;
    return rate;
}

async function completeCollection() {
    if (!currentSession || !currentSession.farmer) {
        alert('Please scan farmer RFID card first');
        return;
    }
    
    const weight = parseFloat(document.getElementById('liveWeight').value);
    const fat = parseFloat(document.getElementById('liveFat').value.replace('%', ''));
    const snf = parseFloat(document.getElementById('liveSnf').value.replace('%', ''));
    const rate = parseFloat(document.getElementById('liveRate').value.replace('₹', ''));
    const density = parseFloat(document.getElementById('liveDensity').value);
    const temp = parseFloat(document.getElementById('liveTemp').value.replace('°C', ''));
    
    if (!weight || !rate) {
        alert('Please complete quality analysis first');
        return;
    }
    
    logMessage('Saving collection to database...');
    
    try {
        const response = await fetch('/IntegratedCollection?handler=SaveSession', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: new URLSearchParams({
                sessionId: currentSession.id,
                farmerId: currentSession.farmer.id,
                quantity: weight,
                fat: fat,
                snf: snf,
                rate: rate,
                amount: weight * rate,
                density: density || 1.028,
                temperature: temp || 25,
                rfidCardId: 'CARD' + Date.now()
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            logMessage(`Collection saved to database (ID: ${result.collectionId})`);
            logMessage('Printing receipt...');
            
            // Stop weight monitoring
            if (weightInterval) {
                clearInterval(weightInterval);
                weightInterval = null;
            }
            
            setTimeout(() => {
                logMessage('Receipt printed successfully');
                logMessage('Collection session completed');
                
                // Reset form
                resetForm();
            }, 2000);
        } else {
            alert('Failed to save collection to database');
        }
    } catch (error) {
        console.error('Error saving collection:', error);
        alert('Error saving collection to database');
    }
}

function resetForm() {
    document.getElementById('sessionId').value = '';
    document.getElementById('farmerInfo').value = '';
    document.getElementById('liveWeight').value = '';
    document.getElementById('liveFat').value = '';
    document.getElementById('liveSnf').value = '';
    document.getElementById('liveRate').value = '';
    document.getElementById('liveDensity').value = '';
    document.getElementById('liveTemp').value = '';
    document.getElementById('totalAmount').value = '';
    
    currentSession = null;
}

function tareScale() {
    logMessage('Taring scale...');
    document.getElementById('liveWeight').value = '0.00';
}

function logMessage(message) {
    console.log(`[${new Date().toLocaleTimeString()}] ${message}`);
}
</script>
</form>