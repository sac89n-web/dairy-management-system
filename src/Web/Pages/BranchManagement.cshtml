@page
@model BranchManagementModel

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="fas fa-sitemap text-primary"></i> Multi-Branch Management</h2>
        <p class="text-muted">Manage branch hierarchy, transfers, and consolidated operations</p>
    </div>
    <div>
        <button class="btn btn-success me-2" data-bs-toggle="modal" data-bs-target="#transferModal">
            <i class="fas fa-exchange-alt"></i> New Transfer
        </button>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBranchModal">
            <i class="fas fa-plus"></i> Add Branch
        </button>
    </div>
</div>

<!-- Branch Hierarchy -->
<div class="row mb-4">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-tree"></i> Branch Hierarchy</h5>
            </div>
            <div class="card-body">
                <div id="branchTree">
                    @foreach(var branch in Model.Branches)
                    {
                        <div class="branch-node" data-branch-id="@branch.Id">
                            <div class="d-flex justify-content-between align-items-center p-3 border rounded mb-2 @(branch.BranchType == "head_office" ? "bg-primary text-white" : branch.BranchType == "regional" ? "bg-info text-white" : "bg-light")">
                                <div>
                                    <h6 class="mb-1">@branch.BranchName</h6>
                                    <small>@branch.BranchCode | @branch.BranchType.Replace("_", " ").ToUpper()</small><br>
                                    <small>@branch.ContactPerson | @branch.Phone</small>
                                </div>
                                <div class="text-end">
                                    <div class="mb-1">
                                        <small>Farmers: @branch.Stats.FarmerCount | Collection: @branch.Stats.TodayCollection.ToString("N0")L</small>
                                    </div>
                                    <div>
                                        <button class="btn btn-sm btn-outline-light" onclick="viewBranchDetails(@branch.Id)">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-light" onclick="editBranch(@branch.Id)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            @if(branch.SubBranches.Any())
                            {
                                <div class="ms-4">
                                    @foreach(var subBranch in branch.SubBranches)
                                    {
                                        <div class="d-flex justify-content-between align-items-center p-2 border rounded mb-1 bg-light">
                                            <div>
                                                <strong>@subBranch.BranchName</strong>
                                                <small class="text-muted">(@subBranch.BranchCode)</small><br>
                                                <small>@subBranch.ContactPerson</small>
                                            </div>
                                            <div class="text-end">
                                                <small>@subBranch.Stats.FarmerCount farmers | @subBranch.Stats.TodayCollection.ToString("N0")L</small>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-chart-bar"></i> Branch Performance</h5>
            </div>
            <div class="card-body">
                <canvas id="branchPerformanceChart" height="150"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Recent Transfers -->
<div class="card mb-4">
    <div class="card-header">
        <h5><i class="fas fa-exchange-alt"></i> Inter-Branch Transfers</h5>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Transfer #</th>
                        <th>From</th>
                        <th>To</th>
                        <th>Type</th>
                        <th>Amount/Quantity</th>
                        <th>Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var transfer in Model.Transfers)
                    {
                        <tr>
                            <td><strong>@transfer.TransferNumber</strong></td>
                            <td>@transfer.FromBranchName</td>
                            <td>@transfer.ToBranchName</td>
                            <td>
                                <span class="badge bg-secondary">@transfer.TransferType.Replace("_", " ").ToUpper()</span>
                            </td>
                            <td>
                                @if(transfer.Amount.HasValue)
                                {
                                    <span>₹@transfer.Amount.Value.ToString("N0")</span>
                                }
                                @if(transfer.Quantity.HasValue)
                                {
                                    <span>@transfer.Quantity.Value.ToString("N0")L</span>
                                }
                            </td>
                            <td>@transfer.TransferDate.ToString("dd/MM/yyyy")</td>
                            <td>
                                <span class="badge @(transfer.Status == "completed" ? "bg-success" : transfer.Status == "pending" ? "bg-warning" : "bg-info")">
                                    @transfer.Status.ToUpper()
                                </span>
                            </td>
                            <td>
                                @if(transfer.Status == "pending")
                                {
                                    <button class="btn btn-sm btn-success" onclick="approveTransfer(@transfer.Id)">
                                        <i class="fas fa-check"></i> Approve
                                    </button>
                                }
                                <button class="btn btn-sm btn-outline-primary" onclick="viewTransfer(@transfer.Id)">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Consolidated Report -->
<div class="card">
    <div class="card-header">
        <h5><i class="fas fa-file-alt"></i> Consolidated Report</h5>
    </div>
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-3">
                <label class="form-label">From Date</label>
                <input type="date" class="form-control" id="fromDate" value="@DateTime.Today.AddDays(-30).ToString("yyyy-MM-dd")">
            </div>
            <div class="col-md-3">
                <label class="form-label">To Date</label>
                <input type="date" class="form-control" id="toDate" value="@DateTime.Today.ToString("yyyy-MM-dd")">
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button class="btn btn-primary" onclick="generateReport()">
                    <i class="fas fa-chart-line"></i> Generate Report
                </button>
            </div>
        </div>
        
        <div id="reportResults">
            <div class="row">
                <div class="col-md-3">
                    <div class="text-center">
                        <h4 class="text-primary">@Model.ConsolidatedReport.TotalCollection.ToString("N0")L</h4>
                        <small class="text-muted">Total Collection</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <h4 class="text-success">₹@Model.ConsolidatedReport.TotalRevenue.ToString("N0")</h4>
                        <small class="text-muted">Total Revenue</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <h4 class="text-info">@Model.ConsolidatedReport.TotalFarmers</h4>
                        <small class="text-muted">Active Farmers</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="text-center">
                        <h4 class="text-warning">@Model.ConsolidatedReport.BranchSummaries.Count</h4>
                        <small class="text-muted">Active Branches</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Transfer Modal -->
<div class="modal fade" id="transferModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Inter-Branch Transfer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="transferForm">
                    <div class="mb-3">
                        <label class="form-label">From Branch</label>
                        <select class="form-select" name="fromBranchId" required>
                            <option value="">Select Branch</option>
                            @foreach(var branch in Model.Branches.SelectMany(b => new[] { b }.Concat(b.SubBranches)))
                            {
                                <option value="@branch.Id">@branch.BranchName</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">To Branch</label>
                        <select class="form-select" name="toBranchId" required>
                            <option value="">Select Branch</option>
                            @foreach(var branch in Model.Branches.SelectMany(b => new[] { b }.Concat(b.SubBranches)))
                            {
                                <option value="@branch.Id">@branch.BranchName</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Transfer Type</label>
                        <select class="form-select" name="transferType" onchange="toggleTransferFields(this.value)" required>
                            <option value="">Select Type</option>
                            <option value="milk">Milk</option>
                            <option value="inventory">Inventory</option>
                            <option value="cash">Cash</option>
                        </select>
                    </div>
                    <div class="mb-3" id="quantityField" style="display:none;">
                        <label class="form-label">Quantity (Liters)</label>
                        <input type="number" class="form-control" name="quantity" step="0.01">
                    </div>
                    <div class="mb-3" id="amountField" style="display:none;">
                        <label class="form-label">Amount (₹)</label>
                        <input type="number" class="form-control" name="amount" step="0.01">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Transfer Date</label>
                        <input type="date" class="form-control" name="transferDate" value="@DateTime.Today.ToString("yyyy-MM-dd")" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" name="notes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createTransfer()">Create Transfer</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Branch Performance Chart
const branchCtx = document.getElementById('branchPerformanceChart').getContext('2d');
new Chart(branchCtx, {
    type: 'bar',
    data: {
        labels: [@Html.Raw(string.Join(",", Model.Branches.SelectMany(b => new[] { b }.Concat(b.SubBranches)).Select(b => $"'{b.BranchName}'")))],
        datasets: [{
            label: 'Collection (L)',
            data: [@string.Join(",", Model.Branches.SelectMany(b => new[] { b }.Concat(b.SubBranches)).Select(b => b.Stats.TodayCollection))],
            backgroundColor: '#007bff'
        }]
    },
    options: {
        responsive: true,
        plugins: {
            legend: { display: false }
        },
        scales: {
            y: { beginAtZero: true }
        }
    }
});

function toggleTransferFields(type) {
    const quantityField = document.getElementById('quantityField');
    const amountField = document.getElementById('amountField');
    
    if (type === 'milk' || type === 'inventory') {
        quantityField.style.display = 'block';
        amountField.style.display = 'none';
    } else if (type === 'cash') {
        quantityField.style.display = 'none';
        amountField.style.display = 'block';
    } else {
        quantityField.style.display = 'none';
        amountField.style.display = 'none';
    }
}

function createTransfer() {
    const form = document.getElementById('transferForm');
    const formData = new FormData(form);
    
    // Simulate transfer creation
    alert('Transfer created successfully!');
    location.reload();
}

function approveTransfer(transferId) {
    if (confirm('Approve this transfer?')) {
        // API call to approve transfer
        alert('Transfer approved successfully!');
        location.reload();
    }
}

function viewTransfer(transferId) {
    alert(`Viewing transfer details for ID: ${transferId}`);
}

function viewBranchDetails(branchId) {
    alert(`Viewing branch details for ID: ${branchId}`);
}

function editBranch(branchId) {
    alert(`Editing branch ID: ${branchId}`);
}

function generateReport() {
    const fromDate = document.getElementById('fromDate').value;
    const toDate = document.getElementById('toDate').value;
    
    if (!fromDate || !toDate) {
        alert('Please select both dates');
        return;
    }
    
    // Reload page with date parameters
    window.location.href = `/BranchManagement?fromDate=${fromDate}&toDate=${toDate}`;
}
</script>